// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: pb/nunet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployerClient is the client API for Deployer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployerClient interface {
	DeployJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error)
}

type deployerClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployerClient(cc grpc.ClientConnInterface) DeployerClient {
	return &deployerClient{cc}
}

func (c *deployerClient) DeployJob(ctx context.Context, in *JobRequest, opts ...grpc.CallOption) (*JobResponse, error) {
	out := new(JobResponse)
	err := c.cc.Invoke(ctx, "/Deployer/DeployJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployerServer is the server API for Deployer service.
// All implementations must embed UnimplementedDeployerServer
// for forward compatibility
type DeployerServer interface {
	DeployJob(context.Context, *JobRequest) (*JobResponse, error)
	mustEmbedUnimplementedDeployerServer()
}

// UnimplementedDeployerServer must be embedded to have forward compatible implementations.
type UnimplementedDeployerServer struct {
}

func (UnimplementedDeployerServer) DeployJob(context.Context, *JobRequest) (*JobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployJob not implemented")
}
func (UnimplementedDeployerServer) mustEmbedUnimplementedDeployerServer() {}

// UnsafeDeployerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployerServer will
// result in compilation errors.
type UnsafeDeployerServer interface {
	mustEmbedUnimplementedDeployerServer()
}

func RegisterDeployerServer(s grpc.ServiceRegistrar, srv DeployerServer) {
	s.RegisterService(&Deployer_ServiceDesc, srv)
}

func _Deployer_DeployJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).DeployJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Deployer/DeployJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).DeployJob(ctx, req.(*JobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployer_ServiceDesc is the grpc.ServiceDesc for Deployer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Deployer",
	HandlerType: (*DeployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeployJob",
			Handler:    _Deployer_DeployJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/nunet.proto",
}
